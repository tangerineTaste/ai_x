-- DCL
--  (사용자 계정 생성 CREATE USER, 권한부여 GRANT, 권한박탈 REVOKE, 사용자계정삭제 DROP USER
--  트랜젝션 명령어
-- DDL : 테이블 생성 CREATE TABLE, 테이블구조변경 ALTER TABLE, 테이블 삭제 DROP TABLE 
-- DML : INSERT, SELECT, UPADTE, DELETE - DML은 취소 가능

--------------
-- ★ DDL ★ --
--------------

-- 1. 테이블 생성(CREATE TABLE 테이블명..) : 테이블 구조를 정의
    CREATE TABLE BOOK(
        BOOKID NUMBER(4), -- BOOKID는 숫자 4자리
        BOOKNAME VARCHAR(20), --BOOKNAME필드의 타입은 문자 20BYTE
        PUBLISHER VARCHAR(20),
        RDATE DATE,          -- RDATE 필드의 타입은 DATE형
        PRICE NUMBER(8,2),   -- PRICE 필드의 타입은 숫자전체8자리 중 소숫점2자리
        PRIMARY KEY(BOOKID) -- 제약조건 : BOOKID를 PRIMARY KEY 필드로(NOT NULL, UNUQUE)
    );
    SELECT * FROM BOOK;
    DESC BOOK;
    
    DROP TABLE BOOK; -- 2. 테이블삭제
    CREATE TABLE BOOK(
        BOOKID NUMBER(4) PRIMARY KEY, 
        BOOKNAME VARCHAR(20), 
        PUBLISHER VARCHAR(20),
        RDATE DATE,          
        PRICE NUMBER(8) 
    );
    -- EX. DEPT01 : DEPTNO(숫지2; PK), DNAME(문자14), LOC(문자13)
    DROP TABLE DEPT01;
    CREATE TABLE DEPT01(
        DEPTNO NUMBER(2) PRIMARY KEY,
        DNAME VARCHAR(14),
        LOC VARCHAR(13)
    );  
    SELECT * FROM dept01;
    
    INSERT INTO EMP(EMPNO, ENAME, DEPTNO) VALUES(9999,'HONG',40);
    INSERT INTO EMP(EMPNO, ENAME, DEPTNO) VALUES(9998,'MA',50);
    ROLLBACK;
    -- EMP테이블과 유사한 EMP01 테이블 : EMPNO(수4 PK), ENAME(문10), SAL(수7,2), DEPTNO(수2-FK)
    DROP TABLE EMP01;
    CREATE TABLE EMP01(
        EMPNO NUMBER(4) PRIMARY KEY,
        ENAME VARCHAR2(10),
        SAL NUMBER(7,2),
        DEPTNO NUMBER(2) REFERENCES DEPT01(DEPTNO)
    );
    
    DROP TABLE EMP01;
    CREATE TABLE EMP01(
        EMPNO NUMBER(4) ,
        ENAME VARCHAR2(10),
        SAL NUMBER(7,2),
        DEPTNO NUMBER(2),
        PRIMARY KEY(EMPNO),
        FOREIGN KEY(DPENO) REFERENCES DEPT01(DEPTNO)
    );
INSERT INTO EMP01 SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP;
COMMIT;
--------------
-- ★ DML ★ --
--------------
-- 1. INSERT INTO 테이블명 (필드명1, 필드명2,...) VALUES(값1, 값2, ...);
  --  INSERT INTO 테이블명 VALUES(값1, 값2, 값3, ...값N);
INSERT INTO DEPT01 VALUES(50, 'ACCOUNTING', 'SEOUL');
INSERT INTO DEPT01 VALUES(51, '전산', '신림');
INSERT INTO DEPT01 VALUES(52, '영업', '봉천');
INSERT INTO DEPT01 (DEPTNO, DNAME, LOC) VALUES(53,'연구',NULL); -- 명시적 NULL
INSERT INTO DEPT01 (DEPTNO, DNAME) VALUES(60,'설계'); -- 묵시적 NULL
SELECT * FROM DEPT01;
COMMIT; -- 트랜젝션 영역에 쌓여있는 DML 명령어 일괄 실행
-- 서브쿼리를 이용한 INSERT
    -- EX. DEPT 테이블에서 10~30부서의 내용을 DEPT01 테이블에 INSERT
INSERT INTO DEPT01 SELECT * FROM DEPT WHERE DEPTNO<40;

-- 연습문제 PDF 1PAGE
--SAM01의구조(EMPNO를주키로)
--EMPNO(사번) –NUMBER(4)
--ENAME(이름) –VARCHAR2(10)
--JOB(직책) –VARCHAR2(9)
--SAL(급여) –NUMBER(7,2)
DROP TABLE SAM01;
CREATE TABLE SAM01(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    SAL NUMBER (7,2)
);
INSERT INTO SAM01 VALUES(1000,'APPLE', 'POLICE', 10000);
INSERT INTO SAM01 VALUES(1010,'BANANA', 'NURSE', 15000);
INSERT INTO SAM01 VALUES(1020,'ORANGE', 'DOCTOR', 25000);
INSERT INTO SAM01 VALUES(1030,'VERY', NULL, 25000);
INSERT INTO SAM01 VALUES(1040,'CAT', NULL, 2000);
INSERT INTO SAM01 SELECT EMPNO, ENAME, JOB, SAL FROM EMP WHERE EMP.DEPTNO = 10;
SELECT * FROM SAM01 ORDER BY EMPNO;
COMMIT;


-- 2. UPDATE 테이블명 SET 필드명1=값1[, 필드명2=값2, ...필드값N=값N] [WHERE 조건];
SELECT * FROM EMP01;
--EX 부서번호를 30으로 수정
UPDATE EMP01 SET DEPTNO=30;
SELECT * FROM EMP01;
ROLLBACK;
--EX 모든 사원(EMP01)의 급여(SAL)를 10%인상
UPDATE EMP01 SET SAL = SAL*1.1;
SELECT * FROM EMP01;
ROLLBACK;
--EX EMP01테이블에서 10번부서의 직월을 30번 부서로
UPDATE EMP01 SET DEPTNO = 30 WHERE DEPTNO=10;
SELECT * FROM EMP01;
ROLLBACK;

DROP TABLE EMP01;
CREATE TABLE EMP01 AS SELECT * FROM EMP;
--EX SCOTT의 부서번호를 30으로, JOB은 'MANAGER'로, SAL과 COMM을 500$인상, 입사일은 오늘로, 상사를 KING으로
UPDATE EMP01 
    SET DEPTNO=30,
        JOB = 'MANAGER',
        SAL = SAL + 500,
        COMM = NVL(COMM,0) + 500,
        -- HIREDATE = TO_DATE('25-06-04', 'YY-MM-DD'),
        HIREDATE = SYSDATE,
        MGR = (SELECT EMPNO FROM EMP01 WHERE ENAME='KING')
    WHERE ENAME = 'SCOTT';
SELECT * FROM EMP01 WHERE ENAME='SCOTT';
-- EX DALLAS에 근무하는 직원의 급여, 상여를 100$인상
UPDATE EMP01 SET SAL = SAL + 100, COMM=NVL(COMM, 0) + 100
        WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC = 'DALLAS');
SELECT * FROM EMP01;
-- EMP01에서 모든 사원의 급여와 입사일을 'KING'의 급여와 입사일로 수정
UPDATE EMP01
    SET SAL = (SELECT SAL FROM EMP01 WHERE ENAME = 'KING'),
        HIREDATE = (SELECT HIREDATE FROM EMP01 WHERE ENAME = 'KING');
SELECT * FROM EMP01;
ROLLBACK;
    
-- 3. DELETE FROM
DELETE FROM EMP01;
SELECT * FROM EMP01;
ROLLBACK; -- INSERT, UPDATE, DELETE만 취소가능
DELETE FROM DEPT; -- 불가(EMP테이블의 참조된 데이터가 있다)
    -- EX EMP01에서 'FORD'직원 퇴사
    DELETE FROM EMP01 WHERE ENAME='FORD';
    SELECT * FROM EMP01;
    -- EX EMP01에서 30번 부서 직원 삭제
    DELETE FROM EMP01 WHERE DEPTNO=30;
    SELECT * FROM EMP01;
    -- EX. 부서명이 RESEARCH 부서인 직원을 삭제
    DELETE FROM EMP01 WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='RESEARCH');
    SELECT * FROM EMP01;
    ROLLBACK;
    -- SAM01 : JOB이 정해지지 않은 사원 삭제
    SELECT * FROM SAM01;
    DELETE FROM SAM01 WHERE JOB IS NULL;
    -- SAM01 : 이름이 ORANGE 삭제
    DELETE FROM SAM01 WHERE ENAME='ORANGE';
                    
-- 연습문제 PDF 2PAGE
DROP TABLE MY_DATA;
CREATE TABLE MY_DATA(
    ID NUMBER(4) PRIMARY KEY,
    NAME VARCHAR2(10),
    USERID VARCHAR2(30),
    SALARY NUMBER(10,2)
);
INSERT INTO MY_DATA VALUES(1,'SCOTT', 'SSCOTT', 10000.00);
INSERT INTO MY_DATA VALUES(2,'FORD', 'FFORD', 13000.00);
INSERT INTO MY_DATA VALUES(3,'PATEL', 'PPATEL', 33000.00);
INSERT INTO MY_DATA VALUES(4,'REPORT', 'RREPORT', 23500.00);
INSERT INTO MY_DATA VALUES(5,'GOOD', 'GGOOD', 44450.00);
-- 3
SELECT ID,NAME,USERID, TO_CHAR(SALARY,'99,999.99') FROM MY_DATA;
-- 4 
COMMIT;
-- 5
UPDATE MY_DATA SET SALARY = 65000.00 WHERE ID=3;
-- 6
DELETE FROM MY_DATA WHERE NAME='FORD';
COMMIT;
-- 7
UPDATE MY_DATA SET SALARY=15000 WHERE SALARY<15000;
--8
DROP TABLE MY_DATA;

-- 연습문제 PDF 3PAGE
-- 1
DROP TABLE EMP01;
CREATE TABLE EMP01 AS SELECT * FROM EMP;
UPDATE EMP01 SET DEPTNO = 30;
SELECT * FROM EMP01;
--2
UPDATE EMP01 SET SAL = SAL*1.1;
--3
UPDATE EMP01 SET SAL = SAL*1.1 WHERE SAL >= 3000;

--4
UPDATE EMP01 SET SAL = SAL + 1000
        WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE LOC = 'DALLAS');
-- 5
UPDATE EMP01 SET DEPTNO=20, JOB='MANAGER' WHERE ENAME='SCOTT';
-- 6
DELETE FROM EMP01 WHERE DEPTNO = (SELECT DEPTNO FROM DEPT WHERE DNAME='SALES');

-- 제약조건 : INSERT, UPDATE할 때, 제약조건에 맞는 데이터만 INSERT, UPDATE됨
-- (1) PRIMARY KEY : 테이블의 각 행을 유일한 값으로 식별하기 위한 필드
-- (2) FOREIGN KEY : 테이블의 열이 다른 테이블의 열을 참조
-- (3) NOT NULL    : NULL을 포함하지 않는 필드
-- (4) UNIQUE      : 모든 행의 값이 유일한 값. NULL은 허용(NULL값은 중복가능)
-- (5) CHECK(조건)  : 해당 조건이 만족(NULL 값 허용)
-- DEFAULT 기본값   : 해당 열의 데이터를 입력하지 않으면 원래는 NULL이 들어갈 것을 다르게 설정

-- DEPT1 & EMP1 (EXERD를 이용하여 ERD 작성 -> DDL)
DROP TABLE DEPT1;
CREATE TABLE DEPT1(
    DEPTNO NUMBER(2) PRIMARY KEY,
    DNAME VARCHAR2(14) UNIQUE NOT NULL,
    LOC VARCHAR2(13) NOT NULL
);
DROP TABLE EMP1;
CREATE TABLE EMP1(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10) NOT NULL,
    JOB VARCHAR2(9) NOT NULL,
    MGR NUMBER(4),
    HIREDATE DATE DEFAULT SYSDATE,
    SAL NUMBER(7,2) CHECK (SAL>0),
    COMM NUMBER(7,2),
    DEPTNO NUMBER(2) REFERENCES DEPT1(DEPTNO)
);
INSERT INTO EMP1 VALUES (1111, 'HONG', 'MANAGER', 1000, 10); --오류 : FK가 현재 비어있음
INSERT INTO DEPT1 SELECT * FROM DEPT; -- DEPT의 내용을 DEPT1에
INSERT INTO DEPT1 VALUES(40, 'IT','SEOUL'); -- 오류 : PK 중복
INSERT INTO DEPT1 (DNAME, LOC) VALUES(40, 'IT','SEOUL'); -- 오류 : PK 없음
SELECT * FROM DEPT1;
INSERT INTO DEPT1 VALUES (40, 'SALES', 'SEOUL'); -- 오류 : UNIQUE 중복
INSERT INTO DEPT1 (DEPTNO, DNAME) VALUES (50, 'IT'); -- 오류 : NOT NULL

INSERT INTO EMP1 (EMPNO, ENAME, JOB) VALUES (1001,'HONGGILDONG', 'MANAGER'); --오류 : 길이
INSERT INTO EMP1 (EMPNO, ENAME, JOB) VALUES (1001,'HONG', 'MANAGER');
SELECT * FROM EMP1;
INSERT INTO EMP1 (EMPNO, ENAME, JOB, SAL) VALUES (1002, 'KIM', 'MANAGER', 0); -- 오류 : CHECK
INSERT INTO EMP1 (EMPNO, ENAME, JOB, SAL) VALUES (1002, 'KIM', 'MANAGER', 1);

DROP TABLE MAJOR;
CREATE TABLE MAJOR(
    mCODE NUMBER(2) PRIMARY KEY,
    mNAME VARCHAR2(50) NOT NULL,
    mOFFICE VARCHAR2(50)
);

DROP TABLE STUDENT;
CREATE TABLE STUDENT(
    sNO NUMBER(5) PRIMARY KEY,
    sNAME VARCHAR2(50) NOT NULL,
    sSCORE NUMBER(3) CHECK (SSCORE BETWEEN 0 AND 100),
    mCODE NUMBER(2) REFERENCES MAJOR(mCODE)
);
