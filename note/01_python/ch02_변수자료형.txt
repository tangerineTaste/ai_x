2장 자료형과 연산자
1절 변수
	선언이 필요없고 할당과 동시에 타입이 셋팅
	문자, 숫자, _로 변수명작성/숫자로 시작하거나 예약어는 사용불가
	다중 변수할당시 일괄 할당
	ex. a, b = 10, 20
2절 화면 i/o
	input()은 입력된 값을 문자로 반환
	print(출력 내용, sep=' ', end='\n')
3절 기본 자료형
	숫자형 : int, float, complex
		int값/int값=>실수
		지수형 표현(큰수, 작은수)은 => 실수
	문자형 : str
		문자열 연산 : +(연결) *(반복)
	
	
4절 formatting
	f"{age} {name}님 반갑습니다"
	"{}살 {}님 반갑습니다."format(age, name)
	"{[인덱스]:[공백대체문자][정렬방식][자릿수][타입]}".format(변수)

★정규표현식:
	1. 참조 : 위키백과
	2. 간략한 문법 : 
    	\d (숫자와 매치, [0-9]와 동일)
    	\D (숫자가 아닌 것)
    	\w (영문자나 숫자. [a-zA-Z0-9])
    	\W (영문자나 숫자가 아닌 문자)
    	.  (문자)
    	\. (.의미)
    	\- (-의미)
    	{2, 4} (2-4번 반복)
    	{4} (4번 반복)
    	{2,} (2번 이상 반복)
    	+  (1번 이상 반복)
    	*  (0번 이상 반복)
    	?  (0번이나 1번 반복)

5절 연산자:
    	산술연산 : + - * / // % **
    	할당연산 : = += -= *= /= //= %=
    	논리연산 : & and | or not
    	비교연산 : > >= < <= == !=
    	비트연산 : & | ^
    	&와 |는 비교연산자보다 우선순위가 높다

6절 문자열:
	문자열 슬라이싱 변수[from:stop:step]
	len(문자열 변수) : 문자갯수
	upper() : 대문자로 변환
	lower() : 소문자로 변환
	title() : 각 어절의 첫 글자만 대문자로
	capitalize() : 첫문자만 대문자로
	count('찾을문자열') : '찾을문자열'이 몇개 들어있는지 갯수를 반환
	find('찾을문자열') : '찾을문자열'이 왼쪽부터 시작하여 몇번째 인덱스에 있는지 인덱스를 반환
	rfind('찾을문자열') : '찾을문자열'이 오른쪽부터 ....
        		**찾을문자열이 없다면 -1을 반환**
    		cf) index('찾을문자열') : '찾을문자열'의 인덱스 반환. 없다면 오류발생
	startswith('특정문자열') : '특정문자열'로 시작하는지 여부
	endswith('특정문자열') : '특정문자열'로 끝나는지 여부
	strip() : 좌우 공백 제거
	rstrip() : 오른쪽 공백 제거
	lstrip() : 왼쪽 공백 제거
	isdigit() : 문자열이 숫자문자열인지 여부
	islower() : 소문자문자열인지 여부
	isupper() : 대문자문자열인지 여부
	replace(oldStr, newStr) : oldStr을 newStr로 변경

	
