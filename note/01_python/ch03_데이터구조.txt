1절 리스트 : [타입과 관련없는 0개 이상의 데이터들]
	len(lst) : 데이터 개수
	min(lst), max(lst), sum(lst) : 최소, 최대, 합
	data in lst : lst안에 data 요소가 있는지 여부
	lst[idx], lst[from:stop:step] 인덱싱과 슬라이싱
	추가 : lst.append(value), lst.insert(idx, value)
	삭제 : lst.pop(), lst.pop(idx), lst.remove(data)
	위치 찾기 : lst.index(data), lst.count(data) 
	수정 : lst[idx] = data, idx번째 인덱스에 값을 data로 수정,
	        lst[ : :2] = [data1, data2], 슬라이싱을 이용하여 스텝마다 값을 수정 가능	
	정렬 : lst.sort(), 기본 오름차순. 
	        lst.reverse() 리스트를 역순으로 바꿈
	복제 : copy_lst = lst 경우 얕은 복사
	        copy-lst = lst.copy() 깊은 복사. 깊은 복사는 복사본을 수정해도 원본의 손상이 없음
	
2절 튜플: (타입과 관련없는 0개 이상의 데이터들)
	리스트와 유사하나 수정할 수 없음
	min(), max(), sum(), sorted() 와 같이 조회는 가능함

3절 딕셔너리:{key1 : value1, key2 : value2 }
	키는 중복불가, 값(value)는 중복 가능. 키에 list 불가
	인덱스 없음.
	읽기: dic.get(key1)
	수정: dic[key1] = 수정할 데이터
	제거: del dic[key1], dic.pop(key1)
	추가: dic[key9] = value9
	dic.items() : 각 항목들을 (key, value) 형식의 튜플로 반환
	dic.keys() : key 들을 반환
	dic.values() : value 들을 반환
	len(dic) : 항목 수 반환

4절 셋: {타입과 관련없는 0개 이상의 데이터들}
	중복된 값 X, 순서 없음(인덱스 없음)
	추가 : add(스칼라데이터), update(데이터구조)
	삭제 : remove(삭제할데이터)
	연산 : & | -

데이터구조를 for문을 이용하여 출력할 경우 enumerate를 사용