1,2절 예외처리:
	하는 이유 : 예외가 날 가능성이 있는 부분에 대해 미리 예상하고, 그에 대한 처리를 프로그래밍 하는 것
	ex. 파일을 다룰 때 : 파일이 없거나, 쓰기 금지로 인한 오류
	ex. 데이터베이스 프로그래밍 시 제약조건 등으로 CRUD(CREATE, READ, UPDATE, DELETE) 오류
	ex. 네트워크 프로그래밍 시 네트워크 연결 실패 로 인한 오류
	ex. 리스트 또는 튜플의 인덱스를 벗어난 참조로 인한 오류
	
	문법:
	try:
	   실행하려는 코드s
	except [예외타입] :
	   예외 발생 시 실행하는 코드
	except [예외타입, 예외타입]:
	   예외 발생 시 실행하는 코드
	except [예외타입 as e]: 	#e는 예외 발생 시 생성되는 객체
	   예외 발생 시 실행하는 코드
               #print(e)
	else:
	   try절을 수행하다 예외가 발생 안되면 else절을 한번 수행
    	   하지만 try 마지막 줄에 쓰는 것과 문법상 같기 때문에 잘 쓰이지 않는다
	finally:
    	   예외가 발생 안 하면 try-else-finally절 수행
    	   예외가 발생하면 try수행 중 except - finally절 수행
    	   즉 finally절은 항상 수행

3절. raise
	강제로 예외를 발생시킴
	특별한 경우에서 사용 EX ) 중첩 반복문 탈출

4절. 추상클래스
	추상클래스 : 객체를 생성할 수 없는 클래스. 상속받을 클래스의 포맷 제공
	추상메소드 : 호출할 수 없는 메소드
	추상 클래스/메소드를 만들어 상속받을 클래스에 사용 지침을 제공
